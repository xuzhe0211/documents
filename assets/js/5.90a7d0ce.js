(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{367:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG84.db816c21.png"},368:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG85.694f0041.png"},369:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG86.0a61cda8.png"},370:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG87.661ea319.png"},371:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG82.4850510d.png"},372:function(e,t,n){e.exports=n.p+"assets/img/WechatIMG83.a5a68cdd.png"},460:function(e,t,n){"use strict";n.r(t);var r=n(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"ssr的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ssr的概念"}},[e._v("#")]),e._v(" ssr的概念")]),e._v(" "),r("p",[e._v("将一个Vue组件在服务器端渲染为HTML字符串并发送到浏览器，最后再将这些静态标记激活为可交互应用程序的过程成为服务端的渲染")]),e._v(" "),r("h2",{attrs:{id:"基本使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[e._v("#")]),e._v(" 基本使用")]),e._v(" "),r("h3",{attrs:{id:"新建工程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建工程"}},[e._v("#")]),e._v(" 新建工程")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("vue create ssr\n")])])]),r("h3",{attrs:{id:"安装依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[e._v("#")]),e._v(" 安装依赖")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm install vue-server-renderer express -D\n")])])]),r("h3",{attrs:{id:"编写服务的启动脚本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编写服务的启动脚本"}},[e._v("#")]),e._v(" 编写服务的启动脚本")]),e._v(" "),r("p",[e._v("server=>index.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// nodejs服务器\nconst express = require('express');\nconst Vue = require('vue');\n\n// 创建express实例和vue实例\nconst app = express();\n\n// 创建渲染器\nconst renderer = require('vue-server-renderer').createRenderer();\n\n// 将来用渲染器渲染page可以得到html内容\nconst page = new Vue({\n    data: {title: '测试'}，\n    template: '<div><h1>{{title}}</h1><div>hello, vue ssr!</div></div>'\n})\n\napp.get('/', async (req, res) => {\n    try {\n        const html = await renderer.renderToString(page);\n        console.log(html);\n        res.send(html)l\n    } catch (error) {\n        res.status(500).send('服务器内部错误');\n    }\n})\n\napp.listen(3000, () => {\n    console.log('渲染服务器启动成功');\n});\n")])])]),r("p",[r("strong",[e._v("server=>index2.js")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// nodejs服务器\nconst express = require('express');\nconst Vue = require('vue');\nconst fs = require('fs');\n// 创建express实例和vue实例\nconst app = express();\n\n// 创建渲染器\nconst {createBundleRenderer} = require('vue-server-renderer');\n\nconst serverBundle = require('../dist/server/vue-ssr-server-bundle.json');\nconst clientManifest = require('../dist/server/vue-ssr-client-manifest.json');\nconst renderer = createBundleRenderer(serverBundle, {\n    runInNewContext: false,\n    template: fs.readFileSync('../public/index.temp.html', 'utf-8'), // 宿主模板文件\n    clientManifest,\n})\n\n// 中间件处理静态文件请求-- 关闭index\napp.use(express.static('../dist/client', {index: false})); \n\n// 将来用渲染器渲染page可以得到html内容\nconst page = new Vue({\n    data: {title: '测试'}，\n    template: '<div><h1>{{title}}</h1><div>hello, vue ssr!</div></div>'\n})\n\n// 路由处理交给vue\napp.get('*', async (req, res) => {\n    try {\n        const context = {\n            url: req.url,\n            title: 'ssr'\n        }\n\n        const html = await renderer.renderToString(context);\n        console.log(html);\n        res.send(html)l\n    } catch (error) {\n        res.status(500).send('服务器内部错误');\n    }\n})\n\napp.listen(3000, () => {\n    console.log('渲染服务器启动成功');\n});\n")])])]),r("p",[r("strong",[e._v("index.temp.html")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!-- vue-ssr-outlet --\x3e\n</body>\n</html>\n')])])]),r("h3",{attrs:{id:"路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),r("p",[e._v("安装 vue-router")]),e._v(" "),r("h3",{attrs:{id:"入口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#入口"}},[e._v("#")]),e._v(" 入口")]),e._v(" "),r("p",[e._v("app.js")]),e._v(" "),r("h3",{attrs:{id:"服务的入口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务的入口"}},[e._v("#")]),e._v(" 服务的入口")]),e._v(" "),r("p",[e._v("entry-server.js")]),e._v(" "),r("h3",{attrs:{id:"客户端入口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端入口"}},[e._v("#")]),e._v(" 客户端入口")]),e._v(" "),r("p",[e._v("entry-client.js")]),e._v(" "),r("h3",{attrs:{id:"webpack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),r("p",[e._v("// router=>index.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import Vue from 'vue';\nimport Router from 'vue-router';\nimport Index from '@/components/Index';\nimport Detail from '@/components/Detail';\n\nVue.use(Router);\n\n// exort default new Router({})\n\n// 这里为什么不导出一个router实例\n/**\n每次用户请求都需要创建router实例\n优化：？？缓存？\n*/\nexport default function createRouter() {\n    return new Router({\n        node: 'history',\n        routes: [\n            {path: '/', component: Index},\n            {path: '/detail', compoents: Detail},\n        ]\n    })\n}\n")])])]),r("p",[e._v("app.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 创建vue实例\nimport Vue from 'vue';\nimport App from './App.vue';\nimport createRouter from './router';\n\nexport default function createApp() {\n    const router = createRouter();\n    const app = new Vue({\n        router,\n        render: h => h(App)\n    })\n    // .$mount()  无需挂载 只需要里面内容\n\n    return {app, router}\n}\n")])])]),r("p",[e._v("entry-server.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 渲染首屏\nimport createApp from './app';\n\n// context哪儿来？？\nexport default context => {\n    return new Promise((resolve, reject) => {\n        const {app, router} = createApp();\n        // 进入首屏\n        router.push(context.url);\n        router.onReady(() => {\n            resolve();\n        }, reject)\n    })\n};\n")])])]),r("p",[e._v("entry-client.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 挂载、激活app\n\nimport createApp from './app';\n\nconst {app, router} = createApp();\nrouter.onReady(() => {\n    app.$mount('#app');\n})\n")])])]),r("p",[e._v("webpack\n"),r("img",{attrs:{src:n(367),alt:"构建图"}}),e._v(" "),r("img",{attrs:{src:n(368),alt:"构建图"}}),e._v(" "),r("img",{attrs:{src:n(369),alt:"构建图"}}),e._v(" "),r("img",{attrs:{src:n(370),alt:"构建图"}})]),e._v(" "),r("p",[r("img",{attrs:{src:n(371),alt:"构建图"}}),e._v(" "),r("img",{attrs:{src:n(372),alt:"代码结构"}})]),e._v(" "),r("h2",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),r("h3",{attrs:{id:"csr特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csr特点"}},[e._v("#")]),e._v(" csr特点")]),e._v(" "),r("ul",[r("li",[e._v("首屏渲染速度慢")]),e._v(" "),r("li",[e._v("SEO不友好")])]),e._v(" "),r("p",[e._v("ssr")]),e._v(" "),r("ul",[r("li",[e._v("开发条件受限")]),e._v(" "),r("li",[e._v("构建部署要求多")]),e._v(" "),r("li",[e._v("服务端负载变大")])]),e._v(" "),r("h2",{attrs:{id:"异步数据同步问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步数据同步问题"}},[e._v("#")]),e._v(" 异步数据同步问题")]),e._v(" "),r("p",[e._v("数据预取")]),e._v(" "),r("p",[e._v('服务器端渲染的应用程序的"快照",如果应用依赖与一些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据')]),e._v(" "),r("p",[e._v("store/index.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport function createStore() {\n    return new Vuex.Stror({\n        state: {\n            count: 0\n        },\n        mutations: {\n            init(state, count) {\n                state.count = count;\n            },\n            add(state) {\n                state.count += 1;\n            }\n        },\n        actions: {\n            // 加一个异步请求count的action\n            get\bCount({commit}) {\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        commit('init', Math.random * 100);\n                        resolve()\n                    }, 1000);\n                })\n            }\n        }\n    })\n}\n")])])]),r("p",[e._v("app.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 创建vue实例\nimport Vue from 'vue';\nimport App from './App.vue';\nimport createRouter from './router';\nimport {createStore} from './store';\n\nVue.config.productionTip = false;\n\n// 加入一个群居混入，处理客户端asyncData调用\nVue.mixin({\n    beforeMount() {\n        const {asyncData} = this.$options;\n        if (asyncData) {\n            asyncData({\n                store.this.$store,\n                route: this.$route\n            })\n        }\n    }\n})\n\n// 需要返回一个应用程序工厂:返回vue实例和router实例、store实例\nexport default function createApp() {\n    // 处理首屏，就要先处理路由跳转\n    const router = createRouter();\n    const app = new Vue({\n        router,\n        store,\n        context,\n        render: h => h(App)\n    })\n    // .$mount()  无需挂载 只需要里面内容\n\n    return {app, router, store}\n}\n")])])]),r("p",[e._v("Home.vue")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<h2 @click=\"$store.commit('add')\">{{$store.state.count}}</h2>\n\nasyncData({store, route}) {\n    return store.dispath('getCount')\n}\n")])])]),r("p",[e._v("entry-server.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 渲染首屏\nimport createApp from './app';\n\n// context哪儿来？？\nexport default context => {\n    return new Promise((resolve, reject) => {\n        const {app, router} = createApp();\n        // 进入首屏\n        router.push(context.url);\n        router.onReady(() => {\n            // 获取当前匹配的所有组件\n            const metched = router.getMatchedComponents();\n\n            // 404\n            if (!matched.length) {\n                return reject({code: 404});\n            }\n\n            // 遍历matched 数组，判断他们内部有没有asyncData\n            // 如果有就执行，等待返回结果\n            Promise.all(\n                matched.map(Component => {\n                    if (Component.asyncData) {\n                        return Component.asyncData({\n                            store, \n                            route: router.currentRoute\n                        })\n                    }\n                })\n            ).then(() => {\n                // 约定 将app数据状态放入context.state\n                // 渲染器会将state序列化变成字符串 window.__INITIAL_STATE__\n                // 未来在前端激活之前可以在恢复\n                context.state = store.state;\n                resolve(app);\n            }).catch(reject);\n        }, reject)\n    })\n};\n")])])]),r("p",[e._v("entry-client.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 挂载、激活app\n\nimport createApp from './app';\n// 客户端激活\nconst {app, router} = createApp();\n\n// 还原state\nif (window.__INITIAL_STATE__) {\n    store.replaceState(window.__INITIAL_STATE__);\n}\n\nrouter.onReady(() => {\n    app.$mount('#app');\n})\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);