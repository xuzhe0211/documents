(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{391:function(e,n,s){"use strict";s.r(n);var t=s(42),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("使用expect实现自动登录的脚本，网上有很多，可是都没有一个明白的说明，初学者一般都是照抄、收藏。可是为什么要这么写却不知其然。本文用一个最短的例子说明脚本的原理。")]),e._v(" "),s("p",[e._v("脚本代码如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('　　##############################################\n　　#!/usr/bin/expect\n　　set timeout 30\n　　spawn ssh -l username 192.168.1.1\n　　expect "password:"\n　　send "ispass\\r"\n　　interact\n　　##############################################\n')])])]),s("ol",[s("li",[e._v("［#!/usr/bin/expect］")])]),e._v(" "),s("p",[e._v("这一行告诉操作系统脚本里的代码使用那一个shell来执行。这里的expect其实和linux下的bash、windows下的cmd是一类东西。\n　　注意：这一行需要在脚本的第一行。")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("［set timeout 30］")])]),e._v(" "),s("p",[e._v("基本上认识英文的都知道这是设置超时时间的，现在你只要记住他的计时单位是：秒")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("［spawn ssh -l username 192.168.1.1］")])]),e._v(" "),s("p",[e._v("spawn是进入expect环境后才可以执行的expect内部命令，如果没有装expect或者直接在默认的SHELL下执行是找不到spawn命令的。所以不要用 “which spawn“之类的命令去找spawn命令。好比windows里的dir就是一个内部命令，这个命令由shell自带，你无法找到一个dir.com 或 dir.exe 的可执行文件。\n　　它主要的功能是给ssh运行进程加个壳，用来传递交互指令。")]),e._v(" "),s("p",[e._v('4. ［expect "password:"］')]),e._v(" "),s("p",[e._v("这里的expect也是expect的一个内部命令，有点晕吧，expect的shell命令和内部命令是一样的，但不是一个功能，习惯就好了。这个命令的意思是判断上次输出结果里是否包含“password:”的字符串，如果有则立即返回，否则就等待一段时间后返回，这里等待时长就是前面设置的30秒")]),e._v(" "),s("p",[e._v('5. ［send "ispass\\r"］')]),e._v(" "),s("p",[e._v("这里就是执行交互动作，与手工输入密码的动作等效。\n　　温馨提示： 命令字符串结尾别忘记加上“\\r”，如果出现异常等待的状态可以核查一下。")]),e._v(" "),s("p",[e._v("6. ［interact］")]),e._v(" "),s("p",[e._v("执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('　　#!/usr/bin/expect #注意安装的路径，不确定 whereis expect 一下\n　　# Change a login shell to bash\n　　set user [lindex $argv 0]\n　　spawn bash $user\n　　expect "]:"\n　　send "/bin/bash "\n　　expect eof\n　　exit\n')])])]),s("p",[e._v("使用expect自动登录")]),e._v(" "),s("p",[e._v("一，什么是expect?\n在做系统管理时，我们很多时候需要输入密码，例如：连接 ssh,连接ftp,\n那么如何能做到不输入密码吗？\n我们需要有一个工具，能代替我们实现与终端的交互，\n那么，就是它：expect，管理员的最好的朋友之一\n它能够代替我们实现与终端的交互，我们不必再守候在电脑旁边输入密码，\n或是根据系统的输出再运行相应的命令，\n这些都可以由expect代替我们来完成")]),e._v(" "),s("p",[e._v("说明：expect到底是什么？\nexpect是一种脚本语言，使用起来非常简单，我们看后面的例子即可以了解到了")]),e._v(" "),s("p",[e._v("三，安装expect")]),e._v(" "),s("p",[e._v("备注：因为expect是基于tcl的，所以需要你的系统中安装有tcl\n如何检查？")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@dev ~]# whereis tcl\ntcl: /usr/lib/tcl8.4 /usr/share/tcl8.4\n\n如果看不到结果，请先安装tcl\n安装,\n[root@dev ~]# yum install expect\n也可以从http://rpm.pbone.net下载for相应发行版的rpm包\n")])])]),s("p",[e._v("四，使用expect自动登录的例子\n1,程序例子的内容 :\n先做功能 上的说明\n此程序ssh登录到作为参数传递过来的ip地址上\n然后执行: df -h\nfree -m\nuptime\n来检查系统的情况")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('[root@dev ~]# cat monitor_auto\n#!/usr/bin/expect -f\n\n#-------------------------------------------------- about us\n# product: monitorone\n# Author: liuhongdi <hongdi.liu@chinafotopress.com>\n# Last Modified: 2008-05-13\n# version: 0.3.2\n# user:this script will help you to monitor many linux(unix) machine\n# license: this script is based GPL\n\n#-------------------------------------------------- set the variable,you can modify the value\n\nset loginuser "root"\nset loginpass {passwordonthishost}\n\nset ipaddr [lrange $argv 0 0]\nset timeout 300\nset cmd_prompt "]#|~]?"\n\n#-------------------------------------------------- login by ssh\nspawn ssh $loginuser@$ipaddr\nset timeout 300\nexpect {\n-re "Are you sure you want to continue connecting (yes/no)?" {\nsend "yes\\r"\n} -re "assword:" {\nsend "$loginpass\\r"\n} -re "Permission denied, please try again." {\nexit\n} -re "Connection refused" {\nexit\n} timeout {\nexit\n} eof {\nexit\n}\n}\n\nexpect {\n-re "assword:" {\nsend "$loginpass\\r"\n}\n-re $cmd_prompt {\nsend "\\r"\n}\n}\n\n#---------------------------------------------------- now,we do some commands\nexec sleep 1\nexpect {\n-re $cmd_prompt {\nsend "df -h\\r"\n}\n}\n\nexec sleep 1\nexpect {\n-re $cmd_prompt {\nsend "free -m\\r"\n}\n}\n\nexec sleep 1\nexpect {\n-re $cmd_prompt {\nsend "uptime\\r"\n}\n}\nexec sleep 1\n\n\n#--------------------------------------------------\nexpect {\n-re $cmd_prompt {\nsend "exit\\r"\n}\n}\n\n\nexit\n#interact\n\n2,程序 运行的显示结果\n\n[root@dev ~]# ./monitor_auto 209.209.94.107\nspawn ssh root@209.209.94.107\nroot@209.209.94.107\'s password:\nLast login: Sun Feb 15 01:42:39 2009 from 201.103.105.49\n\n[root@ws ~]#\n[root@ws ~]# df -h\nFilesystem ÈÝ ÒÑÓÃ ¿ÉÓÃ ÒÑÓÃ% ¹ÒÔصã\n/dev/mapper/VolGroup00-LogVol00\n133G 72G 55G 57% /\n/dev/sda1 99M 13M 82M 14% /boot\nnone 1014M 0 1014M 0% /dev/shm\n209.209.94.109:/www/pics\n5.9T 5.6T 138G 98% /bank/bank1\n[root@ws ~]# free -m\ntotal used free shared buffers cached\nMem: 2026 1955 71 0 72 1621\n-/+ buffers/cache: 261 1764\nSwap: 1983 68 1915\n[root@ws ~]# uptime\n01:48:00 up 561 days, 8:53, 2 users, load average: 0.13, 0.09, 0.07\n[root@ws ~]# [root@dev ~]#\n\n\n四，对此程序的详细说明:\n1,set loginuser "root"\nset用来定义变量，定义之后的代码中可以使用所定义的变量\n使用时注意需添加$符号\n使用时的例子: spawn ssh $loginuser@$ipaddr \n')])])]),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/ysdaniel/article/details/7059511",target:"_blank",rel:"noopener noreferrer"}},[e._v("源文件地址"),s("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);