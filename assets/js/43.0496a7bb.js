(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{416:function(e,n,t){"use strict";t.r(n);var r=t(42),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"开发模式、算法、并发限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发模式、算法、并发限制"}},[e._v("#")]),e._v(" 开发模式、算法、并发限制")]),e._v(" "),t("h2",{attrs:{id:"柯里化函数-add-1-2-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数-add-1-2-3"}},[e._v("#")]),e._v(" 柯里化函数 add(1)(2)(3)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = Array.prototype.slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var _adder = function() {\n        _args.push(...arguments);\n        return _adder;\n    };\n\n    // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n    _adder.toString = function () {\n        return _args.reduce(function (a, b) {\n            return a + b;\n        });\n    }\n    return _adder;\n}\n\n// 可使用剩余参数的方式\nfunction add(..._args) {\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var _adder = function() {\n        _args.push(...arguments);\n        return _adder;\n    };\n\n    // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n    _adder.toString = function () {\n        return _args.reduce(function (a, b) {\n            return a + b;\n        });\n    }\n    return _adder;\n}\n")])])]),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("剩余参数"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("剩余参数语法允许我们将一个不定数量的参数表示为一个数组。")]),e._v(" "),t("h3",{attrs:{id:"虚拟dom-diff算法-编译compile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom-diff算法-编译compile"}},[e._v("#")]),e._v(" 虚拟DOM,diff算法，编译compile")]),e._v(" "),t("h3",{attrs:{id:"q1-请说一下你的上一家公司开发发布流程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q1-请说一下你的上一家公司开发发布流程。"}},[e._v("#")]),e._v(" Q1 请说一下你的上一家公司开发发布流程。")]),e._v(" "),t("h3",{attrs:{id:"q-http-的-cache-浏览器如何获取设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q-http-的-cache-浏览器如何获取设置"}},[e._v("#")]),e._v(" Q http 的 cache ，浏览器如何获取设置")]),e._v(" "),t("p",[e._v("强缓存&协商缓存")]),e._v(" "),t("h3",{attrs:{id:"q2-虚拟dom是怎么实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q2-虚拟dom是怎么实现的"}},[e._v("#")]),e._v(" Q2 虚拟dom是怎么实现的")]),e._v(" "),t("h3",{attrs:{id:"q3-你说一下为什么canvas的图片为什么会有跨域问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q3-你说一下为什么canvas的图片为什么会有跨域问题"}},[e._v("#")]),e._v(" Q3 你说一下为什么canvas的图片为什么会有跨域问题")]),e._v(" "),t("h3",{attrs:{id:"q4-你说一下webpack的一些plugin-怎么使用webpack对项目进行优化。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q4-你说一下webpack的一些plugin-怎么使用webpack对项目进行优化。"}},[e._v("#")]),e._v(" Q4 你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。")]),e._v(" "),t("p",[e._v("1、减少编译体积 ContextReplacementPugin、IgnorePlugin、babel-plugin-import、babel-plugin-transform-runtime。")]),e._v(" "),t("p",[e._v("2、并行编译 happypack、thread-loader、uglifyjsWebpackPlugin开启并行")]),e._v(" "),t("p",[e._v("3、缓存 cache-loader、hard-source-webpack-plugin、uglifyjsWebpackPlugin开启缓存、babel-loader开启缓存")]),e._v(" "),t("p",[e._v("4、预编译 dllWebpackPlugin && DllReferencePlugin、auto-dll-webapck-plugin")]),e._v(" "),t("h2",{attrs:{id:"q-统计网站出现最多的html标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q-统计网站出现最多的html标签"}},[e._v("#")]),e._v(" Q 统计网站出现最多的html标签")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var map = {};\n    //采用递归调用的方法，比较方便和简单。\n    function fds(node) {\n\n        if (node.nodeType === 1) {\n            //这里我们用nodeName属性，直接获取节点的节点名称\n            var tagName = node.nodeName;\n            //判断对象中存在不存在同类的节点，若存在则添加，不存在则添加并赋值为1\n            map[tagName] = map[tagName] ? map[tagName] + 1 : 1;\n        }\n            //获取该元素节点的所有子节点\n        var children = node.childNodes;\n        for (var i = 0; i < children.length; i++) {\n            //递归调用\n            fds(children[i])\n        }\n    }\n    fds(document);\n    console.log(map)\n    \n    \n    function objvalueSort(obj) {//排序的函数\n    //1.根据数组中的对象的“xxx”，得到排序后的key，return key2-key1 表示降序\n    var newkey = Object.keys(obj).sort(function(key1,key2){\n\n        return obj[key2]['xxx']-obj[key1]['xxx'];\n    })\n　　//2.用排序后的key构建新的对象数组\n    var newObj = {};//创建一个新的对象，用于存放排好序的键值对\n    for (var i = 0; i < newkey.length; i++) {//遍历newkey数组\n        newObj[newkey[i]] = obj[newkey[i]];//向新创建的对象中按照排好的顺序依次增加键值对\n    }\n    \n    return newObj;//返回排好序的新对象\n}\n")])])]),t("h3",{attrs:{id:"q5说一下你觉得你最得意的一个项目-你这个项目有什么缺陷-弊端吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q5说一下你觉得你最得意的一个项目-你这个项目有什么缺陷-弊端吗"}},[e._v("#")]),e._v(" Q5说一下你觉得你最得意的一个项目？你这个项目有什么缺陷，弊端吗？")]),e._v(" "),t("h3",{attrs:{id:"q6-请手写实现一个promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q6-请手写实现一个promise"}},[e._v("#")]),e._v(" Q6 请手写实现一个promise")]),e._v(" "),t("h3",{attrs:{id:"q7-现在有那么一个团队-假如让你来做技术架构-你会怎么做"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q7-现在有那么一个团队-假如让你来做技术架构-你会怎么做"}},[e._v("#")]),e._v(" Q7 现在有那么一个团队，假如让你来做技术架构，你会怎么做？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n\n\n性能评估与优化；\n工作中怎样收集性能相关信息，有哪些关键数据，如何获取的，\n然后做了哪些优化工作，达到什么效果之类的\n\n还有就是我简历有电视端 web 的开发，问了很多电视上焦点控制和内存占用的控制的问题\n\n\n还有就是怎么拆解 KPI 或 OKR，怎么跟团队成员分配任务\n")])])]),t("h2",{attrs:{id:"转化为驼峰命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转化为驼峰命名"}},[e._v("#")]),e._v(" 转化为驼峰命名")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var s1 = "get-element-by-id" // 转化为 getElementById\nvar f = function(s) {\n\treturn s.replace(/-\\w/g, function(x) {\n\t\treturn x.slice(1).toUpperCase(); \n    })\n}\n')])])]),t("h2",{attrs:{id:"查找字符串中出现最多的字符和个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找字符串中出现最多的字符和个数"}},[e._v("#")]),e._v(" 查找字符串中出现最多的字符和个数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let str = \"abcabcabcbbccccc\";\nlet num = 0;\nlet char = '';\n// 使其按照一定的次序排列\nstr = str.split('').sort().join(''); // \"aaabbbbbcccccccc\"\n// 定义正则表达式\nlet re = /(\\w)\\1+/g;\nstr.replace(re,($0,$1) => {\n    if(num < $0.length){\n        num = $0.length;\n        char = $1;\n    }\n});\nconsole.log(`字符最多的是${char}，出现了${num}次`)\n")])])]),t("h2",{attrs:{id:"promise-相关题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise-相关题目"}},[e._v("#")]),e._v(" promise 相关题目")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("现在有一个 js 函数，接受一个参数：uid 的数组，数组长度最长 100 ，批量去服务端查询用户 profile：\nconst getUserProfileByUids = (uidList) => {\n    return fetch(`/user/get?uidlist=${encodeURIComponent(uidList.join('.'))}`).then((res) => {\n        return res.json();\n    });\n}\n// 服务端的返回值的结构是：  [{uid: \"001\", nick: 'xx', age: 18},{uid: \"002\", nick: 'xx', age: 18}]\n// 如果传入的 uid 在服务端不存在，在返回值里就没这个 uid 的相关数据\n现在要求实现一个新的查询方法，接受单个 uid，返回一个 Promise ，查询成功，resolve 这个 uid 的 profile，否则 reject。\n要求合并 100ms 内的单个查询，只去服务端批量查询一次，不允许使用任何三方库，批量查询直接使用 getUserProfileByUids\n输入输出样例\n1. 100ms 内的单个请求能够被合并\n2. 请求成功和失败都能正确派发请求的结果，对应 promise 的 resove 和 reject\n3. 窗口内超过 100 个请求，能确保每次批量请求的 ID 个数不超过 100\n")])])]),t("p",[e._v("解题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 入口函数\nconst getUserProfileByUid = function (uid) {\n  return mergeRequest(uid).then(function (res) {\n    return res[uid];\n  })\n}\nconst debounce = (runner, timeout = 100, max = 100) => {\n  let timer = null;\n  let uidCatch = new Array();\n  let promiseCatch = new Array();\n  return function () {\n    clearTimeout(timer);\n    timer = null\n    uidCatch.push(arguments[0])\n    let task = myPromise();\n    promiseCatch.push(task);\n    let callback = function () {\n      timer = null;\n      let uidCatchTemp = uidCatch;\n      uidCatch = [];\n      let tmpPromises = promiseCatch;\n      promiseCatch = [];\n      let delay = Promise.resolve().then(function () {\n        return runner(uidCatchTemp);\n      });\n      tmpPromises.forEach(function (v) {\n        delay.then(v.resolve, v.reject)\n      });\n    };\n    if (uidCatch.length >= max) {\n      callback();\n    } else {\n      timer = setTimeout(callback, timeout);\n    }\n    return task.promise;\n  };\n}\n\nconst mergeRequest = debounce(function (uidList) {\n  return fetch(`/user/get?uidlist=${encodeURIComponent(uidList.join('.'))}`).then((userList) => {\n    let result = {};\n    userList.forEach(function (user) {\n      if (!result[user.uid]) {\n        result[user.uid] = user;\n      }\n    });\n    return result;\n  });\n\n  // 调用模拟 API\n  // return api(uidList.join('.')).then(function (userList) {\n  //   let result = {};\n  //   userList.forEach(function (user) {\n  //     if (!result[user.uid]) {\n  //       result[user.uid] = user;\n  //     }\n  //   });\n  //   return result;\n  // });\n});\n\n// 同级获取 resolve reject\nconst myPromise = () => {\n  let obj = {};\n  obj.promise = new Promise(function (resolve, reject) {\n    obj.resolve = resolve;\n    obj.reject = reject;\n  });\n  return obj;\n}\n\n\n// 以下均为方便调试的模拟方法，真实场景不需要\n// 模拟并发\n// const main = () => {\n//   for (let uid = 0; uid < 10; uid++) {\n//     getUserProfileByUid(uid).then(res => console.log('res',res.name))\n//   }\n// }\n\n// 模拟接口\n// const api = (arrStr) => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       let arr = arrStr.split('.')\n//       let res = arr.map((uid, index) => {\n//         return {\n//           uid: uid,\n//           name: 'demo' + index\n//         }\n//       })\n//       resolve(res)\n//     }, 20);\n//   })\n// }\n")])])]),t("h5",{attrs:{id:"输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出"}},[e._v("#")]),e._v(" 输出")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Promise.resolve().then(() => {\n    console.log(0);\n    return Promise.resolve(4);\n}).then((res) => {\n    console.log(res)\n})\n\nPromise.resolve().then(() => {\n    console.log(1);\n}).then(() => {\n    console.log(2);\n}).then(() => {\n    console.log(3);\n}).then(() => {\n    console.log(5);\n}).then(() =>{\n    console.log(6);\n})\n\n// 输出\n0\n1\n2\n3\n4\n5\n6\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);